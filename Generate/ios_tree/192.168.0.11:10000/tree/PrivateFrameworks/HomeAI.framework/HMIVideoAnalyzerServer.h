/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HomeAI.framework/HomeAI
 */

@interface HMIVideoAnalyzerServer : HMIVideoAnalyzer <HMFLogging, HMIVideoAssetWriterDelegate, HMIVideoCommandBufferDelegate, HMIVideoDecoderDelegate, HMIVideoEncoderDelegate, HMIVideoFrameAnalyzerDelegate, HMIVideoFrameSamplerDelegate, HMIVideoFrameSelectorDelegate, HMIVideoPackageAnalyzerDelegate> {
    double  _analysisFPS;
    HMIVideoAssetWriter * _assetWriter;
    bool  _cancelled;
    HMIVideoCommandBuffer * _commandBuffer;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _currentDTS;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _currentPTS;
    HMIVideoDecoder * _decoder;
    HMIVideoEventBuffer * _dynamicConfigurationBuffer;
    bool  _encode;
    HMIVideoEncoder * _encoder;
    bool  _failed;
    HMIVideoFrameAnalyzer * _frameAnalyzer;
    HMIVideoEventBuffer * _frameAnalyzerResultBuffer;
    HMIVideoFrameSelector * _frameSelector;
    HMIVideoFrameSampler * _frameThumbnailSampler;
    NSData * _initializationSegment;
    bool  _monitored;
    long long  _numDecodedSamples;
    long long  _numDidAnalyzeFragments;
    long long  _numDidAnalyzeFrames;
    HMIVideoPackageAnalyzer * _packageAnalyzer;
    HMIVideoAnalyzerScheduler * _scheduler;
    HMIVideoEventBuffer * _thumbnailBuffer;
    HMIVideoTimeline * _timeline;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (id)logCategory;

- (void).cxx_destruct;
- (void)_ensureAssetWriterForFragment:(id)arg1;
- (void)_ensureEncoderForSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)_handleDecodedSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)_notifyDelegateDidAnalyzeFragment:(id)arg1;
- (void)_notifyDelegateDidAnalyzeFrame:(id)arg1;
- (void)_notifyDelegateDidFailWithError:(id)arg1;
- (void)_produceResult:(SEL)arg1 withArguments:(id)arg2;
- (void)assetWriter:(id)arg1 didFailWithError:(id)arg2;
- (void)assetWriter:(id)arg1 didOutputInitializationSegment:(id)arg2;
- (void)assetWriter:(id)arg1 didOutputSeparableSegment:(id)arg2 timeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg3;
- (void)buffer:(id)arg1 willHandleSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)bufferWillFinish:(id)arg1;
- (void)bufferWillFlush:(id)arg1;
- (void)cancel;
- (void)decoder:(id)arg1 didDecodeSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)decoder:(id)arg1 didFailWithError:(id)arg2;
- (double)delay;
- (id)dynamicConfigurationForTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)encoder:(id)arg1 didEncodeSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)encoder:(id)arg1 didFailWithError:(id)arg2;
- (void)finish;
- (void)flush;
- (void)flushAsync;
- (void)frameAnalyzer:(id)arg1 didAnalyzeFrame:(id)arg2 error:(id)arg3;
- (void)frameSampler:(id)arg1 didSampleFrame:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)frameSelector:(id)arg1 didSelectFrame:(struct opaqueCMSampleBuffer { }*)arg2 detections:(id)arg3;
- (void)handleAssetData:(id)arg1 withOptions:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)handleMessageWithOptions:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)handleSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 errorHandler:(id /* block */)arg2;
- (id)initWithConfiguration:(id)arg1 identifier:(id)arg2;
- (bool)monitored;
- (void)setAnalysisFPS:(double)arg1;
- (void)setMonitored:(bool)arg1;
- (id)stateDescription;
- (unsigned long long)status;

@end
