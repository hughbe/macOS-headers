//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled May 21 2020 17:01:39).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <DifferentialPrivacy/_DPMaintenance-Protocol.h>

@class NSDictionary, _DPCoreDataStorage;
@protocol OS_dispatch_queue;

@interface _DPStorage : NSObject <_DPMaintenance>
{
    BOOL _readOnly;
    NSObject<OS_dispatch_queue> *_queue;
    NSDictionary *_converterFromEntity;
    NSDictionary *_converterFromClass;
    _DPCoreDataStorage *_coredataStorage;
}

+ (id)entitiesRequiringMaintenance;
+ (id)createFetchRequestFor:(id)arg1 entityName:(id)arg2 predicate:(id)arg3 fetchLimit:(unsigned long long)arg4 fetchOffset:(unsigned long long)arg5;
+ (id)errorStringFor:(long long)arg1;
+ (id)storageWithDirectory:(id)arg1 readOnly:(BOOL)arg2;
- (void).cxx_destruct;
@property(readonly, nonatomic) _DPCoreDataStorage *coredataStorage; // @synthesize coredataStorage=_coredataStorage;
@property(readonly, nonatomic) NSDictionary *converterFromClass; // @synthesize converterFromClass=_converterFromClass;
@property(readonly, nonatomic) NSDictionary *converterFromEntity; // @synthesize converterFromEntity=_converterFromEntity;
@property(readonly, nonatomic) BOOL readOnly; // @synthesize readOnly=_readOnly;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
- (void)scheduleMaintenanceWithName:(id)arg1 database:(id)arg2;
- (void)scheduleStorageCullingWithName:(id)arg1 database:(id)arg2;
- (void)dealloc;
- (void)flush;
- (BOOL)deleteStorageWithObliterationOption:(BOOL)arg1;
- (void)deleteRecords:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)updateRecords:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)saveRecords:(id)arg1 andFlush:(BOOL)arg2 withCompletion:(CDUnknownBlockType)arg3;
- (void)saveRecords:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)fetchRecordsFor:(id)arg1 predicate:(id)arg2 fetchLimit:(unsigned long long)arg3 fetchOffset:(unsigned long long)arg4 withCompletion:(CDUnknownBlockType)arg5;
- (void)fetchKeynamesFor:(id)arg1 predicate:(id)arg2 fetchLimit:(unsigned long long)arg3 fetchOffset:(unsigned long long)arg4 withCompletion:(CDUnknownBlockType)arg5;
- (void)fetchRecordCountForEntity:(id)arg1 predicate:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)handleEmptyArrayError:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (id)removeBadObjects:(id)arg1;
- (id)initWithDirectory:(id)arg1 readOnly:(BOOL)arg2;
- (id)init;

@end

