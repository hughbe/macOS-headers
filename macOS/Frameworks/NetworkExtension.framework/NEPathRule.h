//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled May 21 2020 17:01:39).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <NetworkExtension/NEAppRule.h>

#import <NetworkExtension/NEConfigurationValidating-Protocol.h>
#import <NetworkExtension/NEPrettyDescription-Protocol.h>

@class NSNumber;

@interface NEPathRule : NEAppRule <NEConfigurationValidating, NEPrettyDescription>
{
    BOOL _denyCellularFallback;
    BOOL _isIdentifierExternal;
    NSNumber *_aggregatePersonalCellular;
    NSNumber *_aggregateEnterpriseCellular;
    long long _internalCellularBehavior;
    NSNumber *_aggregatePersonalWiFi;
    NSNumber *_aggregateEnterpriseWiFi;
    long long _internalWiFiBehavior;
}

+ (long long)aggregateNetworkBehavior:(long long)arg1 other:(long long)arg2;
+ (BOOL)supportsSecureCoding;
- (void).cxx_destruct;
@property long long internalWiFiBehavior; // @synthesize internalWiFiBehavior=_internalWiFiBehavior;
@property(retain) NSNumber *aggregateEnterpriseWiFi; // @synthesize aggregateEnterpriseWiFi=_aggregateEnterpriseWiFi;
@property(retain) NSNumber *aggregatePersonalWiFi; // @synthesize aggregatePersonalWiFi=_aggregatePersonalWiFi;
@property long long internalCellularBehavior; // @synthesize internalCellularBehavior=_internalCellularBehavior;
@property(retain) NSNumber *aggregateEnterpriseCellular; // @synthesize aggregateEnterpriseCellular=_aggregateEnterpriseCellular;
@property(retain) NSNumber *aggregatePersonalCellular; // @synthesize aggregatePersonalCellular=_aggregatePersonalCellular;
@property BOOL isIdentifierExternal; // @synthesize isIdentifierExternal=_isIdentifierExternal;
@property BOOL denyCellularFallback; // @synthesize denyCellularFallback=_denyCellularFallback;
- (BOOL)supportsWiFiBehavior:(long long)arg1;
- (void)addWiFiBehavior:(long long)arg1 grade:(long long)arg2;
- (BOOL)supportsCellularBehavior:(long long)arg1;
- (void)addCellularBehavior:(long long)arg1 grade:(long long)arg2;
@property long long wifiBehavior;
@property long long cellularBehavior;
- (BOOL)isAggregateRule;
- (BOOL)signingIdentifierAllowed:(id)arg1 domainsOrAccountsRequired:(out char *)arg2;
- (id)description;
- (id)descriptionWithIndent:(int)arg1 options:(unsigned long long)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
@property(readonly, getter=isDefaultPathRule) BOOL defaultPathRule;
- (id)initDefaultPathRule;
- (BOOL)isEqual:(id)arg1;

@end

