/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreSpeech.framework/CoreSpeech
 */

@interface CSUtils : NSObject

+ (void)URLsInDirectory:(id)arg1 matchingPattern:(id)arg2 completion:(id /* block */)arg3;
+ (id)_contentsOfDirectoryAtURL:(id)arg1 matchingPattern:(id)arg2 includingPropertiesForKeys:(id)arg3 error:(id*)arg4;
+ (id)_sharedDisposeLoggingQueue;
+ (void)_sortedURLsInDirectory:(id)arg1 matchingPattern:(id)arg2 completion:(id /* block */)arg3;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })aiffFileASBD;
+ (id)alertMuteBehaviorDict;
+ (id)alertMuteSettings;
+ (void)apply12dBGain:(id)arg1;
+ (void)applyGain:(float)arg1 toBuffer:(id)arg2;
+ (void)applyNegative12dBGain:(id)arg1;
+ (id)assetHashInResourcePath:(id)arg1;
+ (void)clearLogFilesInDirectory:(id)arg1 matchingPattern:(id)arg2 exceedNumber:(unsigned long long)arg3;
+ (id)convertToFloatLPCMBufFromShortLPCMBuf:(id)arg1;
+ (id)convertToShortLPCMBufFromFloatLPCMBuf:(id)arg1;
+ (id)deviceBuildVersion;
+ (id)deviceHwRevision;
+ (id)deviceProductType;
+ (id)deviceProductVersion;
+ (id)deviceUserAssignedName;
+ (unsigned long long)getAssetTypeForNamespace:(id)arg1;
+ (id)getFixedHighPrioritySerialQueueWithLabel:(id)arg1;
+ (id)getFixedPrioritySerialQueueWithLabel:(id)arg1 fixedPriority:(int)arg2;
+ (double)getHostClockFrequency;
+ (unsigned int)getNumElementInBitset:(unsigned long long)arg1;
+ (id)getSiriLanguageWithFallback:(id)arg1;
+ (void)getTrialIdsForAssetType:(unsigned long long)arg1 withCompletion:(id /* block */)arg2;
+ (bool)hasRemoteBuiltInMic;
+ (bool)hasRemoteCoreSpeech;
+ (id)hearstVoiceTriggerRecordContext:(id)arg1;
+ (unsigned long long)hostTimeFromSampleCount:(unsigned long long)arg1 anchorHostTime:(unsigned long long)arg2 anchorSampleCount:(unsigned long long)arg3;
+ (float)hostTimeToSeconds:(unsigned long long)arg1;
+ (double)hostTimeToTimeInterval:(unsigned long long)arg1;
+ (bool)isIOSDeviceSupportingBargeIn;
+ (bool)isRecordContextAutoPrompt:(id)arg1;
+ (bool)isRecordContextHearstDoubleTap:(id)arg1;
+ (bool)isRecordContextHearstVoiceTrigger:(id)arg1;
+ (bool)isRecordContextHomeButtonPress:(id)arg1;
+ (bool)isRecordContextJarvisButtonPress:(id)arg1;
+ (bool)isRecordContextJarvisVoiceTrigger:(id)arg1;
+ (bool)isRecordContextRaiseToSpeak:(id)arg1;
+ (bool)isRecordContextSpeakerIdTrainingTrigger:(id)arg1;
+ (bool)isRecordContextVoiceTrigger:(id)arg1;
+ (void)iterateBitset:(unsigned long long)arg1 block:(id /* block */)arg2;
+ (id)jarvisVoiceTriggerRecordContext:(id)arg1;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmFloatASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmInt16ASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmInt16NarrowBandASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmInterleavedASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmInterleavedASBDWithSampleRate:(float)arg1 numberOfChannels:(unsigned int)arg2;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmInterleavedWithRemoteVADASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmMonoInterleavedWithRemoteVADASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmMonoNonInterleavedWithRemoteVADASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmNarrowBandASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmNonInterleavedASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmNonInterleavedASBDWithSampleRate:(float)arg1 numberOfChannels:(unsigned int)arg2;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })lpcmNonInterleavedWithRemoteVADASBD;
+ (id)lpcmRecordSettings;
+ (unsigned long long)macHostTimeFromBridgeHostTime:(unsigned long long)arg1;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })opusASBD;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })opusNarrowBandASBD;
+ (id)opusRecordSettings;
+ (bool)readAudioChunksFrom:(id)arg1 block:(id /* block */)arg2;
+ (id)recordContextString:(id)arg1;
+ (void)removeLogFilesInDirectory:(id)arg1 matchingPattern:(id)arg2 beforeDays:(float)arg3;
+ (id)rootQueueWithFixedPriority:(int)arg1;
+ (unsigned long long)sampleCountFromHostTime:(unsigned long long)arg1 anchorHostTime:(unsigned long long)arg2 anchorSampleCount:(unsigned long long)arg3;
+ (unsigned long long)secondsToHostTime:(float)arg1;
+ (bool)shouldDeinterleaveAudioOnCS;
+ (bool)shouldDelayPhaticForMyriadDecision;
+ (bool)shouldDownloadVTAssetsOnDaemon;
+ (bool)shouldRunVTOnCS;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })speexASBD;
+ (id)speexRecordSettings;
+ (bool)supportAdBlocker;
+ (bool)supportBeepCanceller;
+ (bool)supportBluetoothDeviceVoiceTrigger;
+ (bool)supportCSTwoShotDecision;
+ (bool)supportCircularBuffer;
+ (bool)supportCompactPlus;
+ (bool)supportContinuousAudioFingerprint;
+ (bool)supportContinuousVoiceTrigger;
+ (bool)supportHandsFree;
+ (bool)supportHearstVoiceTrigger;
+ (bool)supportHybridEndpointer;
+ (bool)supportJarvisVoiceTrigger;
+ (bool)supportKeywordDetector;
+ (bool)supportLanguageDetector;
+ (bool)supportLazySessionActivation;
+ (bool)supportOpportunisticZLL;
+ (bool)supportPhatic;
+ (bool)supportPremiumAssets;
+ (bool)supportPremiumModel;
+ (bool)supportPremiumWatchAssets;
+ (bool)supportRaiseToSpeak;
+ (bool)supportRemoraVoiceTrigger;
+ (bool)supportSAT;
+ (bool)supportSelfTriggerSuppression;
+ (bool)supportSessionActivateDelay;
+ (bool)supportSmartVolume;
+ (bool)supportTTS;
+ (bool)supportZeroFilter;
+ (bool)supportsSpeakerRecognitionAssets;
+ (bool)supportsVoiceTriggerFides;
+ (double)systemUpTime;
+ (id)timeStampWithSaltGrain;
+ (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })utteranceFileASBD;
+ (id)voiceTriggerRecordContext;
+ (bool)xpcConnection:(id)arg1 hasEntitlement:(id)arg2;

@end
