/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MetalPerformanceShadersGraph.framework/MetalPerformanceShadersGraph
 */

@interface MPSGraphExecutable : NSObject {
    struct OpBuilder { struct MLIRContext {} *x1; struct Block {} *x2; struct ilist_iterator<llvm::ilist_detail::node_options<mlir::Operation, false, false, void>, false, false> { struct ilist_node_impl<llvm::ilist_detail::node_options<mlir::Operation, false, false, void> > {} *x_3_1_1; } x3; struct Listener {} *x4; } * _builder;
    unsigned long long  _compilerOptions;
    struct MLIRContext { 
        struct unique_ptr<mlir::MLIRContextImpl, std::__1::default_delete<mlir::MLIRContextImpl> > { 
            struct __compressed_pair<mlir::MLIRContextImpl *, std::__1::default_delete<mlir::MLIRContextImpl> > { 
                struct MLIRContextImpl {} *__value_; 
            } __ptr_; 
        } impl; 
    }  _context;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _executableMutex;
    NSDictionary * _feeds;
    MPSGraph * _graph;
    bool  _initializedWithModule;
    struct ModuleOp { 
        struct Operation {} *state; 
    }  _module;
    struct unordered_map<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > > > > { 
        struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > > > > { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> *> > { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, std::__1::hash<unsigned long long>, true> > { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unique_ptr<GPURuntime, std::__1::default_delete<GPURuntime> > >, std::__1::equal_to<unsigned long long>, true> > { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _runtimeCache;
    struct MPSSymbolTable { struct StringMap<std::__1::basic_string<char>, llvm::MallocAllocator> { struct StringMapEntryBase {} **x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; struct MallocAllocator { } x_1_1_6; } x1; } * _symbolTable;
    NSArray * _targetOperations;
    struct map<MPSGraphTensor *, mlir::Operation *, std::__1::less<MPSGraphTensor *>, std::__1::allocator<std::__1::pair<MPSGraphTensor *const, mlir::Operation *> > > { 
        struct __tree<std::__1::__value_type<MPSGraphTensor *, mlir::Operation *>, std::__1::__map_value_compare<MPSGraphTensor *, std::__1::__value_type<MPSGraphTensor *, mlir::Operation *>, std::__1::less<MPSGraphTensor *>, true>, std::__1::allocator<std::__1::__value_type<MPSGraphTensor *, mlir::Operation *> > > { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MPSGraphTensor *, mlir::Operation *>, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<MPSGraphTensor *, std::__1::__value_type<MPSGraphTensor *, mlir::Operation *>, std::__1::less<MPSGraphTensor *>, true> > { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _targetTensorToOutputOpMap;
    NSArray * _targetTensors;
    struct map<void *, MPSGraphTensor *, std::__1::less<void *>, std::__1::allocator<std::__1::pair<void *const, MPSGraphTensor *> > > { 
        struct __tree<std::__1::__value_type<void *, MPSGraphTensor *>, std::__1::__map_value_compare<void *, std::__1::__value_type<void *, MPSGraphTensor *>, std::__1::less<void *>, true>, std::__1::allocator<std::__1::__value_type<void *, MPSGraphTensor *> > > { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<void *, MPSGraphTensor *>, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<void *, std::__1::__value_type<void *, MPSGraphTensor *>, std::__1::less<void *>, true> > { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _targettedOptimizedExecutableValue;
    struct map<MPSGraphTensor *, mlir::Value, std::__1::less<MPSGraphTensor *>, std::__1::allocator<std::__1::pair<MPSGraphTensor *const, mlir::Value> > > { 
        struct __tree<std::__1::__value_type<MPSGraphTensor *, mlir::Value>, std::__1::__map_value_compare<MPSGraphTensor *, std::__1::__value_type<MPSGraphTensor *, mlir::Value>, std::__1::less<MPSGraphTensor *>, true>, std::__1::allocator<std::__1::__value_type<MPSGraphTensor *, mlir::Value> > > { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MPSGraphTensor *, mlir::Value>, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<MPSGraphTensor *, std::__1::__value_type<MPSGraphTensor *, mlir::Value>, std::__1::less<MPSGraphTensor *>, true> > { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _tensorToExecutableValueMap;
}

@property (nonatomic, readonly) NSDictionary *feeds;
@property (readonly) bool initializedWithModule;
@property (nonatomic, readonly) NSArray *targetOperations;
@property (nonatomic, readonly) NSArray *targetTensors;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (id)debugDescription;
- (void)dump;
- (id)feeds;
- (id)getCompiledShapesForTargetTensors;
- (id)initWithGraph:(id)arg1 feeds:(id)arg2 module:(struct ModuleOp { struct Operation {} *x1; })arg3 targetTensors:(id)arg4;
- (id)initWithGraph:(id)arg1 feeds:(id)arg2 targetTensors:(id)arg3 targetOperations:(id)arg4;
- (bool)initializedWithModule;
- (bool)isExecutableForFeeds:(id)arg1 targetTensors:(id)arg2 targetOperations:(id)arg3;
- (void)optimizationPasses;
- (void)recurseFeeds:(id)arg1 targetTensors:(id)arg2 targetOperations:(id)arg3;
- (void)recurseOperation:(id)arg1 operationsRecursed:(id)arg2;
- (id)runInternalWithMPSCommandBuffer:(id)arg1 feeds:(id)arg2 targetTensors:(id)arg3 targetOperations:(id)arg4 resultsDictionary:(id)arg5 executionDescriptor:(id)arg6 finish:(bool)arg7;
- (id)targetOperations;
- (id)targetTensors;

@end
