/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 */

@interface NSDate : NSObject <AFSecurityDigestibleChunksProviding, CKRecordValue, INJSONSerializable, NSCopying, NSSecureCoding, PQLValuable, _DKDeduping>

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly) double timeIntervalSinceReferenceDate;

// Image: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation

+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)date;
+ (id)dateWithDate:(id)arg1;
+ (id)dateWithString:(id)arg1;
+ (id)dateWithTimeInterval:(double)arg1 sinceDate:(id)arg2;
+ (id)dateWithTimeIntervalSince1970:(double)arg1;
+ (id)dateWithTimeIntervalSinceNow:(double)arg1;
+ (id)dateWithTimeIntervalSinceReferenceDate:(double)arg1;
+ (id)distantFuture;
+ (id)distantPast;
+ (id)now;
+ (bool)supportsSecureCoding;
+ (double)timeIntervalSinceReferenceDate;

- (unsigned long long)_cfTypeID;
- (id)addTimeInterval:(double)arg1;
- (long long)compare:(id)arg1;
- (long long)compare:(id)arg1 toUnitGranularity:(unsigned long long)arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)dateByAddingTimeInterval:(double)arg1;
- (id)description;
- (id)descriptionWithLocale:(id)arg1;
- (id)earlierDate:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (id)initWithDate:(id)arg1;
- (id)initWithString:(id)arg1;
- (id)initWithTimeInterval:(double)arg1 sinceDate:(id)arg2;
- (id)initWithTimeIntervalSince1970:(double)arg1;
- (id)initWithTimeIntervalSinceNow:(double)arg1;
- (id)initWithTimeIntervalSinceReferenceDate:(double)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isEqual:(id)arg1 toUnitGranularity:(unsigned long long)arg2;
- (bool)isEqualToDate:(id)arg1;
- (bool)isInSameDayAsDate:(id)arg1;
- (bool)isInToday;
- (bool)isInTomorrow;
- (bool)isInYesterday;
- (bool)isNSDate__;
- (id)laterDate:(id)arg1;
- (double)timeIntervalSince1970;
- (double)timeIntervalSinceDate:(id)arg1;
- (double)timeIntervalSinceNow;
- (double)timeIntervalSinceReferenceDate;

// Image: /System/Library/Frameworks/Foundation.framework/Foundation

+ (id)dateWithNaturalLanguageString:(id)arg1;
+ (id)dateWithNaturalLanguageString:(id)arg1 date:(id)arg2 locale:(id)arg3;
+ (id)dateWithNaturalLanguageString:(id)arg1 locale:(id)arg2;

- (id)_web_RFC1123DateString;
- (long long)_web_compareDay:(id)arg1;
- (bool)_web_isToday;
- (Class)classForCoder;
- (id)dateWithCalendarFormat:(id)arg1 timeZone:(id)arg2;
- (id)descriptionWithCalendarFormat:(id)arg1 timeZone:(id)arg2 locale:(id)arg3;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)replacementObjectForPortCoder:(id)arg1;

// Image: /System/Library/Frameworks/Intents.framework/Intents

+ (id)_intents_decodeWithJSONDecoder:(id)arg1 codableDescription:(id)arg2 from:(id)arg3;

- (id)_intents_encodeWithJSONEncoder:(id)arg1 codableDescription:(id)arg2;
- (id)_intents_readableDescriptionWithLocalizer:(id)arg1 metadata:(id)arg2;

// Image: /System/Library/Frameworks/Security.framework/Security

- (double)bucketToRoundingFactor:(unsigned int)arg1;
- (double)timeIntervalSince1970WithBucket:(unsigned int)arg1;

// Image: /System/Library/PrivateFrameworks/AggregateDictionary.framework/AggregateDictionary

+ (id)dateForDaysSince1970:(int)arg1;
+ (int)daysSince1970;

- (int)daysSince1970;

// Image: /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices

- (bool)_af_isSameDayAsDate:(id)arg1;
- (void)af_enumerateDigestibleChunksWithOptions:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;
- (bool)af_isToday;
- (bool)af_isTomorrow;

// Image: /System/Library/PrivateFrameworks/AuthKit.framework/AuthKit

- (id)ak_serverFriendlyString;

// Image: /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard

- (id)bs_dateByAddingDays:(long long)arg1;
- (bool)isAfterDate:(id)arg1;
- (bool)isBeforeDate:(id)arg1;

// Image: /System/Library/PrivateFrameworks/CalendarFoundation.framework/CalendarFoundation

+ (id)CalDateForBeginningOfToday;
+ (id)CalDateForBeginningOfTomorrow;
+ (id)CalDateForEndOfToday;
+ (id)CalDateForEndOfTomorrow;
+ (id)CalDateForNow;
+ (id)CalSimulatedDateForNow;
+ (id)_nowComponents;
+ (id)_todayComponents;
+ (id)_tomorrowComponents;
+ (id)calGMT;
+ (id)dateFromISO8601String:(id)arg1;
+ (id)dateFromISO8601String:(id)arg1 inTimeZone:(id)arg2;
+ (id)dateWithDatePartFromDate:(id)arg1 timePartFromDate:(id)arg2 inCalendar:(id)arg3;
+ (long long)daysSpannedFromStartDate:(id)arg1 toEndDate:(id)arg2 allDay:(bool)arg3 inCalendar:(id)arg4;
+ (id)formatForTimeRange;
+ (id)formatForTimeZoneClarifiedDateString;
+ (id)nextRoundedHour;

- (id)CalDateRoundedDownToNearestMinuteIncrement:(long long)arg1 inCalendar:(id)arg2;
- (bool)CalIsAfterDate:(id)arg1;
- (bool)CalIsAfterOrSameAsDate:(id)arg1;
- (bool)CalIsBeforeDate:(id)arg1;
- (bool)CalIsBeforeOrSameAsDate:(id)arg1;
- (bool)CalIsBetweenStartDate:(id)arg1 endDate:(id)arg2;
- (void)_performBlockBehindDispatchSync:(id /* block */)arg1 inTimeZone:(id)arg2;
- (id)_stringWithUseAbbreviatedFormats:(bool)arg1 lowerCase:(bool)arg2;
- (id)allComponentsInCalendar:(id)arg1;
- (long long)compareDateIgnoringTimeComponents:(id)arg1 inCalendar:(id)arg2;
- (id)componentsForDayInTimeZone:(id)arg1;
- (id)dateAtHour:(unsigned long long)arg1 minute:(unsigned long long)arg2 second:(unsigned long long)arg3 inTimeZone:(id)arg4;
- (id)dateByAddingCalSimulatedOffset;
- (id)dateByAddingDays:(long long)arg1 inCalendar:(id)arg2;
- (id)dateByAddingHours:(long long)arg1 inCalendar:(id)arg2;
- (id)dateByAddingMinutes:(long long)arg1 inCalendar:(id)arg2;
- (id)dateByAddingMonths:(long long)arg1 inCalendar:(id)arg2;
- (id)dateByAddingWeeks:(long long)arg1 inCalendar:(id)arg2;
- (id)dateByAddingYears:(long long)arg1 inCalendar:(id)arg2;
- (id)dateBySubtractingCalSimulatedOffset;
- (id)dateForDayInTimeZone:(id)arg1;
- (id)dateForEndOfDayInTimeZone:(id)arg1;
- (id)dateForStartOfDayInTimeZone:(id)arg1;
- (id)dateInTimeZone:(id)arg1 fromTimeZone:(id)arg2;
- (id)dateOnlyByTranslatingFrom:(id)arg1 toCalendar:(id)arg2;
- (id)dateOnlyComponentsInCalendar:(id)arg1;
- (id)dateRemovingComponents:(unsigned long long)arg1 inCalendar:(id)arg2;
- (id)dateRemovingTimeComponentsInCalendar:(id)arg1;
- (id)dateRoundedDownToNearestFiveMinutesInCalendar:(id)arg1;
- (id)dateRoundedToHourOnSameDayInCalendar:(id)arg1;
- (id)dateRoundedToNearestFifteenMinutesInCalendar:(id)arg1;
- (id)dateRoundedToStartOfNextDayInCalendar:(id)arg1;
- (id)dateWithoutTimeComponentsInTimeZone:(id)arg1;
- (long long)dayInCalendar:(id)arg1;
- (id)ek_ios_dateForEndOfDayInTimeZone:(id)arg1;
- (long long)hourInCalendar:(id)arg1;
- (bool)isAfterDate:(id)arg1;
- (bool)isAfterOrSameDayAsDate:(id)arg1 inCalendar:(id)arg2;
- (bool)isBeforeDate:(id)arg1;
- (bool)isBeforeDayForDate:(id)arg1 inCalendar:(id)arg2;
- (bool)isBeforeOrSameDayAsDate:(id)arg1 inCalendar:(id)arg2;
- (bool)isEqualToDateIgnoringTimeComponents:(id)arg1 inCalendar:(id)arg2;
- (bool)isSameDayAsDate:(id)arg1 inCalendar:(id)arg2;
- (bool)isSameMonthAsDate:(id)arg1 inCalendar:(id)arg2;
- (bool)isSameWeekAsDate:(id)arg1 inCalendar:(id)arg2;
- (bool)isSameYearAsDate:(id)arg1 inCalendar:(id)arg2;
- (bool)isTodayInCalendar:(id)arg1;
- (id)localizedAbbrevDate;
- (id)localizedAbbrevDateInTimeZone:(id)arg1;
- (id)localizedAbbrevMonthWeekdayDay;
- (id)localizedAbbrevMonthWithDay;
- (id)localizedAbbrevMonthWithDayInTimeZone:(id)arg1;
- (id)localizedAbbrevMonthWithDayRangeToDate:(id)arg1;
- (id)localizedAbbrevStandaloneMonth;
- (id)localizedAbbrevWeekdayWithDayOfMonth;
- (id)localizedAbbrevWeekdayWithDayOfMonthPreferWeekdayFirstForEnglish;
- (id)localizedDateStringWithTemplate:(id)arg1;
- (id)localizedDayOfMonth;
- (id)localizedDayOfWeekWithAbbrevDateInTimeZone:(id)arg1;
- (id)localizedFullDate;
- (id)localizedFullDateAndTime;
- (id)localizedFullMonth;
- (id)localizedFullMonthWeekdayDay;
- (id)localizedFullMonthWithDay;
- (id)localizedFullStandaloneWeekday;
- (id)localizedFullWeekdayWithDayOfMonth;
- (id)localizedFullYearMonth;
- (id)localizedHour;
- (id)localizedHourInTimeZone:(id)arg1;
- (id)localizedHourMinutesWithoutAMPM;
- (id)localizedHourMinutesWithoutAMPMInTimeZone:(id)arg1;
- (id)localizedHourWithoutAMPM;
- (id)localizedLongDate;
- (id)localizedMonthAndDayStringShortened:(bool)arg1;
- (id)localizedMonthAndYearStringShortened:(bool)arg1;
- (id)localizedMonthShortened:(bool)arg1;
- (id)localizedMonthWithDayWithPreferredShortening;
- (id)localizedRelativeDateStringShortened:(bool)arg1;
- (id)localizedRelativeDateStringShortened:(bool)arg1 lowercase:(bool)arg2;
- (id)localizedShortDate;
- (id)localizedShortDateAndTime;
- (id)localizedShortMonthWithDay;
- (id)localizedShortStandaloneWeekday;
- (id)localizedShortTime;
- (id)localizedShortTimeInTimeZone:(id)arg1;
- (id)localizedStringForEventTime;
- (id)localizedStringForEventTimeInTimeZone:(id)arg1;
- (id)localizedStringWithFormat:(id)arg1;
- (id)localizedStringWithFormat:(id)arg1 timeZone:(id)arg2;
- (id)localizedTime;
- (id)localizedWeekNumber;
- (id)localizedWeekdayMonthDayStringShortened:(bool)arg1;
- (id)localizedWeekdayMonthDayYearStringShortened:(bool)arg1;
- (id)localizedWeekdayMonthYearStringShortened:(bool)arg1;
- (id)localizedYear;
- (id)localizedYearMonthAndDayStringShortened:(bool)arg1;
- (long long)midnightOffsetMinutes:(id)arg1;
- (long long)minuteInCalendar:(id)arg1;
- (long long)monthInCalendar:(id)arg1;
- (void)printComparisonToDate:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfDayInLocalizedDateString:(id)arg1;
- (id)roundSecondsAndMinutesDownInCalendar:(id)arg1;
- (id)roundSecondsAndMinutesUpInCalendar:(id)arg1;
- (id)roundSecondsDownInCalendar:(id)arg1;
- (id)roundToCurrentDayInCalendar:(id)arg1;
- (id)roundToCurrentMondayInCalendar:(id)arg1;
- (id)roundToCurrentMonthInCalendar:(id)arg1;
- (id)roundToCurrentWeekInCalendar:(id)arg1 withFirstWeekdayIndex:(long long)arg2;
- (id)roundToCurrentYearInCalendar:(id)arg1;
- (long long)secondInCalendar:(id)arg1;
- (id)timeOnlyComponentsInCalendar:(id)arg1;
- (id)timeStringAlwaysIncludeMinutes:(bool)arg1;
- (id)toISO8601String;
- (long long)weekInCalendar:(id)arg1;
- (long long)weekdayInCalendar:(id)arg1;
- (long long)yearInCalendar:(id)arg1;

// Image: /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet

- (id)cd_dateWithCeilingForAlignment:(double)arg1;
- (id)cd_dateWithCeilingForAlignment:(double)arg1 withOffset:(double)arg2 inTimeZone:(id)arg3;
- (id)cd_dateWithFloorForAlignment:(double)arg1;
- (id)cd_dateWithFloorForAlignment:(double)arg1 withOffset:(double)arg2 inTimeZone:(id)arg3;
- (id)dedup;
- (id)dk_localtimeString;
- (id)floorDateWithTotalSlotsInDay:(int)arg1;
- (int)slotFromMidnightWithTotalSlotsInDay:(int)arg1;
- (double)timeSinceMidnight:(id*)arg1;

// Image: /System/Library/PrivateFrameworks/CoreSuggestions.framework/CoreSuggestions

- (id)sg_descriptionForMimeHeaders;

// Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices

+ (id)_geo_calendar;
+ (id)geo_dateWithJulianDay:(double)arg1;

- (double)geo_hoursAndMinutes;
- (double)geo_julianDay;

// Image: /System/Library/PrivateFrameworks/Navigation.framework/Navigation

- (bool)isWholeHour;

// Image: /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices

- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;

// Image: /usr/lib/libprequelite.dylib

+ (id)newFromSqliteStatement:(struct sqlite3_stmt { }*)arg1 atIndex:(int)arg2;
+ (id)newFromSqliteValue:(struct sqlite3_value { }*)arg1;

- (void)sqliteBind:(struct sqlite3_stmt { }*)arg1 index:(int)arg2;

@end
