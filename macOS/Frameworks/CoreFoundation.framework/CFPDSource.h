//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class CFPDDataBuffer, CFPrefsDaemon, NSObject<OS_os_transaction>, NSObject<OS_xpc_object>;

__attribute__((visibility("hidden")))
@interface CFPDSource : NSObject
{
    CFPrefsDaemon *_cfprefsd;
    CFPDDataBuffer *_plist;
    NSObject<OS_xpc_object> *_pendingChangesQueue;
    unsigned long long _pendingChangesSize;
    struct __CFString *_userName;
    struct __CFString *_domain;
    const char *_actualPath;
    struct __CFSet *_observingConnections;
    NSObject<OS_os_transaction> *_dirtyTransaction;
    struct os_unfair_lock_s _observingConnectionsLock;
    struct os_unfair_lock_s _writeLock;
    struct os_unfair_lock_s _lock;
    unsigned int _lastEuid;
    unsigned int _lastEgid;
    int _fileProtectionClass;
    short _generationShmemIndex;
    BOOL _handlingRequest;
    BOOL _dirty;
    BOOL _byHost;
    BOOL _managed;
    BOOL _managedUsesContainer;
    BOOL _neverCache;
    BOOL _checkedForNonPrefsPlist;
    BOOL _restrictedReadability;
    BOOL _waitingForDeviceUnlock;
    BOOL _watchingParentDirectory;
    BOOL _disableBackup;
}

- (void)dealloc;
- (void)cleanUpAfterAcceptingMessage:(id)arg1;
- (id)acceptMessage:(id)arg1;
- (BOOL)requiresSynchronousWriteAndFlushToDaemonInAgentForWorkaroundFor35459826WithKey:(id)arg1;
- (unsigned long long)approximatePlistSizeIncludingPendingChanges;
- (void)attachSizeWarningsToReply:(id)arg1 forByteCount:(unsigned long long)arg2;
- (void)handleNoPlistFound;
- (void)handleSynchronous;
- (void)handleEUIDorEGIDMismatch;
- (void)handleNeverCache;
- (void)handleAvoidCache;
- (void)setObserved:(BOOL)arg1 bySenderOfMessage:(id)arg2;
- (void)stopNotifyingObserver:(id)arg1;
- (int)validateMessage:(id)arg1 withNewKey:(id)arg2 newValue:(id)arg3 plistIsAvailableToRead:(BOOL)arg4 containerPath:(const char *)arg5 diagnosticMessage:(const char **)arg6;
- (int)validateSandboxPermissionsForMessage:(id)arg1 containerPath:(const char *)arg2 accessType:(int)arg3;
- (int)validatePOSIXPermissionsForMessage:(id)arg1 accessType:(int)arg2 fullyValidated:(char *)arg3;
- (int)validateSandboxForRead:(id)arg1 containerPath:(const char *)arg2;
- (BOOL)validateSandboxForWrite:(id)arg1 containerPath:(const char *)arg2;
- (BOOL)validateAccessToken:(int)arg1 accessType:(int)arg2;
- (void)observingConnectionsLockedSync:(CDUnknownBlockType)arg1;
- (void)lockedSync:(CDUnknownBlockType)arg1;
- (void)lockedAsync:(CDUnknownBlockType)arg1;
- (void)clearCache;
- (struct __CFString *)debugDump;
- (BOOL)enqueueNewKey:(id)arg1 value:(id)arg2 encoding:(int)arg3 inBatch:(BOOL)arg4;
- (BOOL)hasObservers;
- (void)drainPendingChanges;
- (void)observingConnectionWasInvalidated:(id)arg1;
- (void)asyncNotifyObserversOfWriteFromConnection:(id)arg1 message:(id)arg2;
- (id)copyPropertyListValidatingPlist:(BOOL)arg1;
- (id)copyPropertyListWithoutDrainingPendingChangesValidatingPlist:(BOOL)arg1;
- (int)cloneAndOpenPropertyListWithoutDrainingPendingChangesOrValidatingPlist;
- (void)markNeedsToReloadFromDiskDueToFailedWrite;
- (void)syncWriteToDisk;
- (void)syncWriteToDiskAndFlushCache;
- (void)setPlist:(id)arg1;
- (void)finishedNonRequestWriteWithError:(int)arg1;
- (void)handleWritingFailureWithError:(int)arg1;
- (CDUnknownBlockType)createDiskWriteShouldPerformSynchronously:(char *)arg1;
- (void)cleanUpIfNecessaryAfterCreatingPlist;
- (void)handleOpenForWritingFailureWithErrno:(int)arg1;
- (void)setDirty:(BOOL)arg1;
- (void)updateShmemEntry;
- (short)shmemIndex;
- (id)description;
- (BOOL)byHost;
- (void)respondToFileWrittenToBehindOurBack;
- (struct __CFString *)cloudConfigurationPath;
- (struct __CFString *)container;
- (struct __CFString *)user;
- (struct __CFString *)domain;
- (void)setManagedPreferencesUseContainer:(BOOL)arg1;
- (BOOL)managed;
- (id)initWithDomain:(struct __CFString *)arg1 userName:(struct __CFString *)arg2 byHost:(BOOL)arg3 managed:(BOOL)arg4 shmemIndex:(short)arg5 daemon:(id)arg6;
- (BOOL)getUncanonicalizedPath:(char *)arg1;
- (struct __CFString *)copyUncanonicalizedPath;
- (void)cacheActualPathCreatingIfNecessary:(BOOL)arg1 euid:(unsigned int)arg2 egid:(unsigned int)arg3 isWritable:(char *)arg4;
- (void)cacheActualPath;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)endHandlingRequest;
- (void)beginHandlingRequest;
- (void)tryEndAccessingPlist;
- (BOOL)shouldBePurgable;

@end

