/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SleepDaemon.framework/SleepDaemon
 */

@interface HDSPWakeDetectionManager : NSObject <HDSPDiagnosticsProvider, HDSPEnvironmentAware, HDSPSleepEventHandler, HDSPSleepEventProvider, HDSPSleepScheduleModelObserver, HDSPSleepScheduleStateObserver, HDSPTimeChangeObserver, HDSPWakeDetectionStateMachineDelegate, HDSPWakeDetectionStateMachineInfoProvider, HDSPWakeDetectorDelegate> {
    HDSPEnvironment * _environment;
    <HDSPSleepEventDelegate> * _sleepEventDelegate;
    HDSPWakeDetectionStateMachine * _stateMachine;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _wakeDetectionLock;
    NSArray * _wakeDetectors;
}

@property (nonatomic, readonly) <NAScheduler> *callbackScheduler;
@property (nonatomic, readonly) NSDate *currentDate;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) HDSPEnvironment *environment;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isDetecting;
@property (nonatomic, readonly, copy) NSString *providerIdentifier;
@property (nonatomic, readonly) HKSPSleepScheduleOccurrence *relevantOccurrence;
@property (nonatomic) <HDSPSleepEventDelegate> *sleepEventDelegate;
@property (nonatomic, readonly) bool sleepModeIsOff;
@property (nonatomic, readonly) HKSPSleepScheduleModel *sleepScheduleModel;
@property (nonatomic, readonly) unsigned long long sleepScheduleState;
@property (nonatomic, readonly) HDSPWakeDetectionStateMachine *stateMachine;
@property (readonly) Class superclass;
@property (nonatomic, readonly) struct os_unfair_lock_s { unsigned int x1; } wakeDetectionLock;
@property (nonatomic, readonly) NSArray *wakeDetectors;

- (void).cxx_destruct;
- (id)_currentState;
- (void)_withLock:(id /* block */)arg1;
- (id)currentDate;
- (id)detectionWindowAfterDate:(id)arg1;
- (id)diagnosticDescription;
- (id)diagnosticInfo;
- (id)environment;
- (void)environmentDidBecomeReady:(id)arg1;
- (void)environmentWillBecomeReady:(id)arg1;
- (id)eventIdentifiers;
- (id)initWithEnvironment:(id)arg1;
- (id)initWithEnvironment:(id)arg1 wakeDetectorProviders:(id)arg2;
- (bool)isDetecting;
- (bool)isWaiting;
- (void)postWakeDetectionNotification;
- (id)providerIdentifier;
- (id)relevantOccurrence;
- (void)scheduleWakeDetection;
- (void)setSleepEventDelegate:(id)arg1;
- (void)significantTimeChangeDetected:(id)arg1;
- (id)sleepEventDelegate;
- (void)sleepEventIsDue:(id)arg1;
- (bool)sleepFeaturesEnabled;
- (bool)sleepModeIsOff;
- (id)sleepScheduleModel;
- (void)sleepScheduleModelManager:(id)arg1 source:(id)arg2 didUpdateSleepScheduleModel:(id)arg3;
- (unsigned long long)sleepScheduleState;
- (void)sleepScheduleStateDidChange:(unsigned long long)arg1 previousState:(unsigned long long)arg2 reason:(unsigned long long)arg3;
- (id)standardProviders;
- (void)startWakeDetection;
- (id)stateMachine;
- (void)stopWakeDetection;
- (void)unscheduleWakeDetection;
- (id)upcomingEventsDueAfterDate:(id)arg1;
- (void)updateState;
- (struct os_unfair_lock_s { unsigned int x1; })wakeDetectionLock;
- (void)wakeDetector:(id)arg1 didDetectWakeUpEventOnDate:(id)arg2;
- (id)wakeDetectors;

@end
