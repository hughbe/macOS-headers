//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled May 21 2020 17:01:39).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import <FileProviderDaemon/FPCancellable-Protocol.h>

@class FPDActionOperationQueue, FPDMoveOperation, FPDMoveWriter, FPMoveInfo, NSError, NSMutableSet;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

@interface FPDMoveReader : NSObject <FPCancellable>
{
    FPDMoveOperation *_operation;
    FPMoveInfo *_info;
    FPDActionOperationQueue *_moveQueue;
    FPDMoveWriter *_writer;
    BOOL _startedPreflight;
    BOOL _finishedPreflight;
    BOOL _willMaterializeTargetFolder;
    BOOL _isTargetFolderMaterialized;
    unsigned long long _depth;
    NSMutableSet *_cancelledRoots;
    BOOL __cancelled;
    NSError *_error;
    NSObject<OS_dispatch_queue> *_queue;
    unsigned long long _logSection;
    NSObject<OS_dispatch_semaphore> *_clientUnblockSema;
    CDUnknownBlockType _rootPreflightCompletionBlock;
    CDUnknownBlockType _preflightCompletionBlock;
    CDUnknownBlockType _startDownloadBlock;
    CDUnknownBlockType _errorBlock;
}

+ (BOOL)_hasDiskWriterSupportForDomain:(id)arg1;
- (void).cxx_destruct;
@property(copy, nonatomic) CDUnknownBlockType errorBlock; // @synthesize errorBlock=_errorBlock;
@property(copy, nonatomic) CDUnknownBlockType startDownloadBlock; // @synthesize startDownloadBlock=_startDownloadBlock;
@property(copy, nonatomic) CDUnknownBlockType preflightCompletionBlock; // @synthesize preflightCompletionBlock=_preflightCompletionBlock;
@property(copy, nonatomic) CDUnknownBlockType rootPreflightCompletionBlock; // @synthesize rootPreflightCompletionBlock=_rootPreflightCompletionBlock;
- (void)dumpStateTo:(id)arg1;
- (void)cancel;
- (void)cancelRoot:(id)arg1;
- (BOOL)_isRootCancelled:(id)arg1;
- (void)_t_unblock;
- (void)_t_waitForUnblock;
- (void)_run;
- (void)_enqueueAtomsForRoot:(id)arg1;
- (BOOL)_shouldUseDiskWriterToPerformMoveForItem:(id)arg1;
- (BOOL)_isSingleMoveForRoot:(id)arg1;
- (void)_bailOutOfRoot:(id)arg1;
- (BOOL)_enqueueItem:(id)arg1 forRoot:(id)arg2 atomically:(BOOL)arg3 useDiskWriter:(BOOL)arg4;
- (id)_targetNameForSource:(id)arg1;
- (id)_getTargetFolderFor:(id)arg1 root:(id)arg2 error:(id *)arg3;
- (void)_progressComputationPreflight;
- (void)_finishWithError:(id)arg1;
- (BOOL)_isCancelled;
- (void)start;
- (id)initWithMoveWriter:(id)arg1 operation:(id)arg2 queue:(id)arg3;
- (id)init;

@end

