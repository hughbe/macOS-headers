/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/QuartzCore.framework/QuartzCore
 */

@interface CAContext : NSObject {
    struct Context { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; struct Mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_5_1_1; } x5; struct Weak<const void *> { id x_6_1_1; bool x_6_1_2; } x6; id x7; struct Context {} *x8; struct CGColorSpace {} *x9; struct __CFDictionary {} *x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; struct ObjectCache {} *x17; id x18; id x19; unsigned int x20; float x21; struct Commit {} *x22; struct Generic { int (**x_23_1_1)(); struct Context {} *x_23_1_2; } x23; struct __CFString {} *x24; unsigned char x25; unsigned int x26 : 1; unsigned int x27 : 1; unsigned int x28 : 1; unsigned int x29 : 1; unsigned int x30 : 1; } * _impl;
}

@property (copy) NSString *annotation;
@property bool colorMatchUntaggedContent;
@property struct CGColorSpace { }*colorSpace;
@property unsigned int commitPriority;
@property (copy) NSString *contentsFormat;
@property (readonly) unsigned int contextId;
@property float desiredDynamicRange;
@property (readonly) unsigned int displayId;
@property (retain) CALayer *layer;
@property float level;
@property (readonly) NSDictionary *options;
@property (getter=isSecure) bool secure;
@property (readonly) bool valid;

+ (id)allContexts;
+ (id)currentContext;
+ (id)localContext;
+ (id)localContextWithOptions:(id)arg1;
+ (id)objectForSlot:(unsigned int)arg1;
+ (id)remoteContext;
+ (id)remoteContextWithOptions:(id)arg1;
+ (void)setClientPort:(unsigned int)arg1;

- (bool)addFence:(id)arg1;
- (bool)addFence:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)annotation;
- (bool)colorMatchUntaggedContent;
- (struct CGColorSpace { }*)colorSpace;
- (unsigned int)commitPriority;
- (id)contentsFormat;
- (unsigned int)contextId;
- (void*)contextImpl;
- (unsigned int)createFencePort;
- (unsigned int)createImageSlot:(struct CGSize { double x1; double x2; })arg1 hasAlpha:(bool)arg2;
- (unsigned int)createImageSlot:(struct CGSize { double x1; double x2; })arg1 hasAlpha:(bool)arg2 extendedColors:(bool)arg3;
- (unsigned int)createSlot;
- (void)dealloc;
- (id)debugDescription;
- (void)deleteSlot:(unsigned int)arg1;
- (float)desiredDynamicRange;
- (unsigned int)displayId;
- (unsigned int)hitTestContext:(struct CGPoint { double x1; double x2; })arg1;
- (id)initRemoteWithOptions:(id)arg1;
- (id)initWithOptions:(id)arg1 localContext:(bool)arg2;
- (void)invalidate;
- (void)invalidateFences;
- (bool)isSecure;
- (id)layer;
- (float)level;
- (id)options;
- (void)orderAbove:(unsigned int)arg1;
- (void)orderBelow:(unsigned int)arg1;
- (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; unsigned int x3; unsigned int x4; struct __CFDictionary {} *x5; unsigned int x6; unsigned int x7; struct SpinLock { struct { int x_1_2_1; } x_8_1_1; } x8; struct SyncRequest {} *x9; unsigned int x10; unsigned int x11; struct Mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_12_1_1; } x12; struct ResourceTable { struct ResourceItem {} **x_13_1_1; unsigned int x_13_1_2; unsigned int x_13_1_3; unsigned int x_13_1_4; unsigned long long x_13_1_5; } x13; struct List<unsigned int> {} *x14; float x15; int x16; struct Ref<CA::Render::String> { struct String {} *x_17_1_1; } x17; struct Ref<CA::Render::String> { struct String {} *x_18_1_1; } x18; unsigned int x19; unsigned int x20; unsigned int x21; unsigned int x22; unsigned long long x23; struct Ref<CA::Render::Handle> { struct Handle {} *x_24_1_1; } x24; unsigned int x25; unsigned int x26; unsigned int x27; int x28; unsigned int x29; float x30; struct unordered_set<CA::Render::String *, std::__1::hash<CA::Render::String *>, std::__1::equal_to<CA::Render::String *>, std::__1::allocator<CA::Render::String *> > { struct __hash_table<CA::Render::String *, std::__1::hash<CA::Render::String *>, std::__1::equal_to<CA::Render::String *>, std::__1::allocator<CA::Render::String *> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *>, std::__1::allocator<std::__1::__hash_node<CA::Render::String *, void *> > > { struct __hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> { struct __hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; } x_31_1_1; } x31; }*)renderContext;
- (struct Context { int (**x1)(); struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; unsigned int x3; unsigned int x4; struct __CFDictionary {} *x5; unsigned int x6; unsigned int x7; struct SpinLock { struct { int x_1_2_1; } x_8_1_1; } x8; struct SyncRequest {} *x9; unsigned int x10; unsigned int x11; struct Mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_12_1_1; } x12; struct ResourceTable { struct ResourceItem {} **x_13_1_1; unsigned int x_13_1_2; unsigned int x_13_1_3; unsigned int x_13_1_4; unsigned long long x_13_1_5; } x13; struct List<unsigned int> {} *x14; float x15; int x16; struct Ref<CA::Render::String> { struct String {} *x_17_1_1; } x17; struct Ref<CA::Render::String> { struct String {} *x_18_1_1; } x18; unsigned int x19; unsigned int x20; unsigned int x21; unsigned int x22; unsigned long long x23; struct Ref<CA::Render::Handle> { struct Handle {} *x_24_1_1; } x24; unsigned int x25; unsigned int x26; unsigned int x27; int x28; unsigned int x29; float x30; struct unordered_set<CA::Render::String *, std::__1::hash<CA::Render::String *>, std::__1::equal_to<CA::Render::String *>, std::__1::allocator<CA::Render::String *> > { struct __hash_table<CA::Render::String *, std::__1::hash<CA::Render::String *>, std::__1::equal_to<CA::Render::String *>, std::__1::allocator<CA::Render::String *> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *>, std::__1::allocator<std::__1::__hash_node<CA::Render::String *, void *> > > { struct __hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> { struct __hash_node_base<std::__1::__hash_node<CA::Render::String *, void *> *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; } x_31_1_1; } x31; }*)retainRenderContext;
- (void)setAnnotation:(id)arg1;
- (void)setColorMatchUntaggedContent:(bool)arg1;
- (void)setColorSpace:(struct CGColorSpace { }*)arg1;
- (void)setCommitPriority:(unsigned int)arg1;
- (void)setContentsFormat:(id)arg1;
- (void)setDesiredDynamicRange:(float)arg1;
- (void)setFence:(unsigned int)arg1 count:(unsigned int)arg2;
- (void)setFencePort:(unsigned int)arg1;
- (void)setFencePort:(unsigned int)arg1 commitHandler:(id /* block */)arg2;
- (void)setLayer:(id)arg1;
- (void)setLevel:(float)arg1;
- (void)setObject:(id)arg1 forSlot:(unsigned int)arg2;
- (void)setSecure:(bool)arg1;
- (bool)valid;

@end
